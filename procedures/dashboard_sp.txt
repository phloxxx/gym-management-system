DELIMITER //

CREATE PROCEDURE `GetActiveMembersCount` ()   
BEGIN
    SELECT COUNT(*) as count FROM member WHERE IS_ACTIVE = 1;
END //

CREATE PROCEDURE `GetActiveProgramsCount` ()   
BEGIN
    SELECT COUNT(*) as count FROM program WHERE IS_ACTIVE = 1;
END //

CREATE PROCEDURE `GetMembershipGrowthData` ()   
BEGIN
    SELECT MONTH(JOINED_DATE) as month, COUNT(*) as count 
    FROM member 
    WHERE JOINED_DATE >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
    GROUP BY MONTH(JOINED_DATE)
    ORDER BY JOINED_DATE;
END //

CREATE PROCEDURE `GetMonthlyRevenue` ()   
BEGIN
    SELECT SUM(s.PRICE) as revenue 
    FROM transaction t 
    JOIN subscription s ON t.SUB_ID = s.SUB_ID 
    WHERE MONTH(t.TRANSAC_DATE) = MONTH(CURRENT_DATE()) 
    AND YEAR(t.TRANSAC_DATE) = YEAR(CURRENT_DATE());
END //

CREATE PROCEDURE `GetRecentMembers` ()   
BEGIN
    SELECT m.MEMBER_FNAME, m.MEMBER_LNAME, m.EMAIL, p.PROGRAM_NAME, 
           m.IS_ACTIVE, m.JOINED_DATE
    FROM member m
    LEFT JOIN program p ON m.PROGRAM_ID = p.PROGRAM_ID
    ORDER BY m.JOINED_DATE DESC 
    LIMIT 3;
END //

CREATE PROCEDURE `GetRecentTransactions` ()   
BEGIN
    SELECT t.TRANSACTION_ID, m.MEMBER_FNAME, m.MEMBER_LNAME,
           s.SUB_NAME, s.PRICE, t.TRANSAC_DATE, p.PAY_METHOD
    FROM transaction t
    JOIN member m ON t.MEMBER_ID = m.MEMBER_ID
    JOIN subscription s ON t.SUB_ID = s.SUB_ID
    JOIN payment p ON t.PAYMENT_ID = p.PAYMENT_ID
    ORDER BY t.TRANSAC_DATE DESC
    LIMIT 3;
END //

CREATE PROCEDURE `GetStaffCount` ()   
BEGIN
    SELECT COUNT(*) as count FROM user WHERE USER_TYPE = 'STAFF' AND IS_ACTIVE = 1;
END //

CREATE PROCEDURE `GetSubscriptionDistribution` ()   
BEGIN
    SELECT s.SUB_NAME, COUNT(ms.MEMBER_ID) as count
    FROM subscription s
    LEFT JOIN member_subscription ms ON s.SUB_ID = ms.SUB_ID
    WHERE s.IS_ACTIVE = 1 AND (ms.IS_ACTIVE = 1 OR ms.IS_ACTIVE IS NULL)
    GROUP BY s.SUB_NAME;
END //